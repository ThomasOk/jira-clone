This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-18T08:33:40.225Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
eslint.config.js
index.html
package.json
postcss.config.js
public/vite.svg
README.md
src/app/index.tsx
src/assets/logo.svg
src/components/layouts/Navbar.tsx
src/features/issues/components/IssueBoard.tsx
src/features/issues/components/IssueItem.tsx
src/features/issues/components/IssueList.tsx
src/features/issues/components/IssueStatusColumn.tsx
src/features/issues/constants/issueStatuses.ts
src/features/issues/mock/mockIssues.ts
src/features/issues/types/issue.types.ts
src/index.css
src/main.tsx
src/vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-icons": "^5.3.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@testing-library/jest-dom": "^6.5.0",
    "@testing-library/react": "^16.0.1",
    "@testing-library/user-event": "^14.5.2",
    "@types/jest": "^29.5.12",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "postcss": "^8.4.41",
    "tailwindcss": "^3.4.10",
    "ts-jest": "^29.2.5",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: src/app/index.tsx
================
import Navbar from "../components/layouts/Navbar";
import IssueBoard from "../features/issues/components/IssueBoard";

function App() {
	return (
		<div className="flex h-screen">
			<Navbar></Navbar>
			<main>
				<h1 className="text-3xl font-bold underline">Hello worlddddd!</h1>
				<IssueBoard />
			</main>
		</div>
	);
}

export default App;

================
File: src/assets/logo.svg
================
<svg height="2500" viewBox="2.59 0 214.09101008 224" width="2361" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientTransform="matrix(1 0 0 -1 0 264)" gradientUnits="userSpaceOnUse" x1="102.4" x2="56.15" y1="218.63" y2="172.39"><stop offset=".18" stop-color="#0052cc"/><stop offset="1" stop-color="#2684ff"/></linearGradient><linearGradient id="b" x1="114.65" x2="160.81" xlink:href="#a" y1="85.77" y2="131.92"/><path d="m214.06 105.73-96.39-96.39-9.34-9.34-72.56 72.56-33.18 33.17a8.89 8.89 0 0 0 0 12.54l66.29 66.29 39.45 39.44 72.55-72.56 1.13-1.12 32.05-32a8.87 8.87 0 0 0 0-12.59zm-105.73 39.39-33.12-33.12 33.12-33.12 33.11 33.12z" fill="#2684ff"/><path d="m108.33 78.88a55.75 55.75 0 0 1 -.24-78.61l-72.47 72.44 39.44 39.44z" fill="url(#a)"/><path d="m141.53 111.91-33.2 33.21a55.77 55.77 0 0 1 0 78.86l72.67-72.63z" fill="url(#b)"/></svg>

================
File: src/components/layouts/Navbar.tsx
================
import { FiPlus } from "react-icons/fi";
import { FiSearch } from "react-icons/fi";
import logo from "../../assets/logo.svg";

const Navbar = () => {
	return (
		<aside className="bg-blue-950 w-48 min-h-screen p-4 flex flex-col">
			<div className="mb-8">
				<img src={logo} alt="logo" className="h-8 w-auto" />
			</div>
			<div className="py-2">
				<button className="text-slate-100 flex items-center space-x-4">
					<FiSearch size={24} />
					<span>Search issues</span>
				</button>
			</div>
			<div className="py-2">
				<button className=" text-slate-100 flex items-center space-x-4">
					<FiPlus size={24} />
					<span>Create issue</span>
				</button>
			</div>

			{/* <nav>
				<ul>
					<li className="">
						<FiPlus className="text-slate-100" />
					</li>
				</ul>
			</nav> */}
		</aside>
	);
};
export default Navbar;

================
File: src/features/issues/components/IssueBoard.tsx
================
import { ISSUE_STATUS_ORDER } from "../constants/issueStatuses";
//import IssueStatusColumn from "./IssueStatusColumn";
import IssueList from "./IssueList";
import { mockIssues } from "../mock/mockIssues";

const IssueBoard = () => {
	return (
		<div className="p-4">
			<h1 className="text-2xl font-bold mb-6">Project Issues Board</h1>
			<div className="flex space-x-4 overflow-x-auto">
				{ISSUE_STATUS_ORDER.map((status) => (
					<div key={status} className="flex-none w-64">
						<IssueList issues={mockIssues} status={status} />
					</div>
				))}
			</div>
		</div>
	);
};
export default IssueBoard;

================
File: src/features/issues/components/IssueItem.tsx
================
import { Issue } from "../types/issue.types";

type IssueItemProps = {
	issue: Issue;
};

const IssueItem = ({ issue }: IssueItemProps) => {
	return <div>{issue.title}</div>;
};
export default IssueItem;

================
File: src/features/issues/components/IssueList.tsx
================
import IssueItem from "./IssueItem";
import { IssueStatus } from "../constants/issueStatuses";
import { Issue } from "../types/issue.types";

type IssueListProps = {
	issues: Issue[];
	status: IssueStatus;
};

const IssueList: React.FC<IssueListProps> = ({ issues, status }) => {
	const filteredIssues = issues.filter((issue) => issue.status === status);

	return (
		<div className="bg-white p-4 rounded-lg shadow">
			<h2 className="text-xl font-bold mb-4">{status}</h2>
			{filteredIssues.length > 0 ? (
				<ul>
					{filteredIssues.map((issue) => (
						<li key={issue.id} className="mb-2">
							<IssueItem issue={issue} />
						</li>
					))}
				</ul>
			) : (
				<p className="text-gray-500">Aucune issue pour ce statut</p>
			)}
		</div>
	);
};
export default IssueList;

================
File: src/features/issues/components/IssueStatusColumn.tsx
================
const IssueStatusColumn = () => {
	return <div>IssueStatusColumn</div>;
};
export default IssueStatusColumn;

================
File: src/features/issues/constants/issueStatuses.ts
================
export const ISSUE_STATUSES = {
	BACKLOG: "Backlog",
	TODO: "À faire",
	IN_PROGRESS: "En cours",
	REVIEW: "En revue",
	DONE: "Terminé",
	CANCELLED: "Annulé",
} as const;

export type IssueStatus = (typeof ISSUE_STATUSES)[keyof typeof ISSUE_STATUSES];

export const ISSUE_STATUS_ORDER: IssueStatus[] = [
	ISSUE_STATUSES.BACKLOG,
	ISSUE_STATUSES.TODO,
	ISSUE_STATUSES.IN_PROGRESS,
	ISSUE_STATUSES.REVIEW,
	ISSUE_STATUSES.DONE,
	ISSUE_STATUSES.CANCELLED,
];

================
File: src/features/issues/mock/mockIssues.ts
================
import { Issue } from "../types/issue.types";
import { ISSUE_STATUSES } from "../constants/issueStatuses";

export const mockIssues: Issue[] = [
	{
		id: "1",
		title: "Implémenter la fonctionnalité de connexion",
		description:
			"Créer un formulaire de connexion et gérer l'authentification des utilisateurs",
		status: ISSUE_STATUSES.TODO,
		assignee: "Alice Johnson",
		creator: "Bob Smith",
		createdAt: new Date("2023-05-10"),
		updatedAt: new Date("2023-05-10"),
		priority: "high",
	},
	{
		id: "2",
		title: "Corriger le bug d'affichage sur la page d'accueil",
		description:
			"Le carrousel ne s'affiche pas correctement sur les appareils mobiles",
		status: ISSUE_STATUSES.IN_PROGRESS,
		assignee: "Charlie Brown",
		creator: "Alice Johnson",
		createdAt: new Date("2023-05-12"),
		updatedAt: new Date("2023-05-15"),
		priority: "medium",
	},
	{
		id: "3",
		title: "Optimiser les performances de la recherche",
		description:
			"La recherche est lente pour les grandes bases de données. Implémenter l'indexation.",
		status: ISSUE_STATUSES.REVIEW,
		assignee: "David Wilson",
		creator: "Eve Taylor",
		createdAt: new Date("2023-05-14"),
		updatedAt: new Date("2023-05-18"),
		priority: "high",
	},
	{
		id: "4",
		title: "Ajouter des tests unitaires pour le module de paiement",
		description: "Augmenter la couverture de tests pour le module de paiement",
		status: ISSUE_STATUSES.TODO,
		assignee: "Frank Miller",
		creator: "Grace Lee",
		createdAt: new Date("2023-05-16"),
		updatedAt: new Date("2023-05-16"),
		priority: "low",
	},
	{
		id: "5",
		title: "Mettre à jour la documentation API",
		description:
			"La documentation est obsolète. Mettre à jour pour refléter les changements récents.",
		status: ISSUE_STATUSES.DONE,
		assignee: "Helen Davis",
		creator: "Ian Clark",
		createdAt: new Date("2023-05-08"),
		updatedAt: new Date("2023-05-20"),
		priority: "medium",
	},
];

================
File: src/features/issues/types/issue.types.ts
================
import { IssueStatus } from "../constants/issueStatuses";

export type IssuePriority = "low" | "medium" | "high";

export type Issue = {
	id: string;
	title: string;
	description: string;
	status: IssueStatus;
	assignee?: string;
	creator: string;
	createdAt: Date;
	updatedAt: Date;
	priority: IssuePriority;
};

export type IssueFilter = {
	status?: IssueStatus;
	priority?: IssuePriority;
	assignee?: string;
};

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/main.tsx
================
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import App from "./app";
import "./index.css";

createRoot(document.getElementById("root")!).render(
	<StrictMode>
		<App />
	</StrictMode>
);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
	content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
	theme: {
		extend: {},
	},
	plugins: [],
};

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})
